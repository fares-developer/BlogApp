A continuación se detalla paso a paso la creación de la aplicación:

1. Creamos la arquitectura de la app, las carpetas data, ui, domain, core y presentation.

2. Creamos la carpeta de navegación en res.

3. En el main_activity creamos fragment_container_view, con el nav_host_fragment y el resto de propiedades.

4. Creamos el modelo de la app:
    -Creamos un paquete llamado model dentro del paquete data
    -Creamos un data class llamado post que contendrá la información de cada uno de los post

5. Añadimos viewBinding al gradle.

6. Creamos una paquete llamado home en ui, es donde almacenaremos el homeScreenFragment
    -Creamos el homeScreenFragment eliminando la plantilla y pasando directament el layout en el constructor
    -Añadimos el onViewCreated al fragment.

7. Abrimos el layout del fragment
    -Cambiamos el FragmeLayout por un LinearLayout
    -Añadimos un RecyclerView

8. Creamos un Layout para cada item de post
    -Creamos un fichero llamado post_item_view
    -Cambiamos constraintLayout por LinearLayout
    -Creamos otro linearLayout para la cabecera del perfil, nombre, y la fecha de subida
    -Añadimos el circleImageView del profile_name
    -Añadimos el TextView del profile_name
    -Añadimos el TextView de la hora de subida
    -Añadimos el ImageView del post

9. Creamos un adapter para recyclerView
    -Creamos un nuevo paquete en ui/home de nombre adapter
    -Creamos el HomeScreenAdapter

10. Creamos un BaseViewHolder dentro del paquete core

11. Le pasamos el BaseViewHolder al HomeScreenAdapter e implementamos los métodos de la interfaz

12. Creamos la clase interna viewHolder de nombre HomeScreenViewHolder que va a poner los datos.

13. Establecemos el adaptador en el fragment HomeScreen

14. Creamos una interfaz en el paquete domain de nombre HomeScreenRepo
    -Creamos un método llamado getLatestPost encargado de la llamada al servidor

15. Creamos un sealed class en el paquete core llamado Resource

16. Creamos nuestro un nuevo paquete llamado remote que contendrá nuestro dataSource
    -Creamos nuesgtra clase HomeScreenDataSource
    -Creamos el método suspend llamado getLatestPosts igual que en HomeScreenRepo

17. Creamos las las colecciones y documents en firestore

18. Implementamos getLatestPosts de HomeScreenDataSource para hacer la llamada a firebase

19. Creamos la clase HomeScreenViewModel en el paquete de presentation

20. Creamos el HomeScreenViewModelFactory

21. En el HomeScreenFragment Creamos un viewModel delegando viewModels y pasando el factory

22. Creamos un progress_bar en el home_fragment

23. Importamos las librerías de firebase auth

24. En el paquete ui creamos un nuevo paquete llamado auth que va contener la interfaz de autenticación
    -Creamos un fragment llamado loginFragment

25. Modificamos el fragment_login layout añadiendo usuario contraseña y otros.

26. Añadimos el login_fragment al main_graph y lo establecemos como inicio de navegación

27. Creamos una instancia de FirebaseAuth en el LoginFragment y lo delegamos a by lazy

28. Creamos los métodos necesarios para validar usuario y password, logearse y otros.

29. Creamos una carpeta home en domain e introducimos la interfaz y la clase repo en él

30. Creamos un paquete auth en domain
    -Creamos una interfaz LoginRepo
    -Creamos una clase LoginRepoIml

31. Creamos un paquete home en remote

32. Creamos un paquete login en remote que va a contener el dataSource de LoginRepoImp

33. Creamos un LoginScreenViewModel y Factory

34. Creamos un FragmentRegister
    -Lo añadimos al main_graph
    -Hacemos los cambios necesarios en el layout de register

35. Creamos un método en LoginFragment que cuando pulsamos el texto de registrarse nos lleve a ello

36. Creamos un paquete de animaciones en res y añadimos los ficheros de animación

37. Añadimos el ojo de ver y ocultar contraseña

38. Creamos un método llamado signUp en RegisterFragment
    -Creamos las validaciones necesarias

39. Renombramos la clase Resource a Result

40. Renombramos LoginScreenFragmentViewModel a AuthViewModel para no tener que crear tantas clases
    -En resumen renombramos to-do lo que tenga que ver con la autenticación.
    -Creamos el método signUp en la interfaz Repo y en la clase RepoImp

41. Creamos un data class dentro de model llamado User

42. Añadimos un bottomNavigationView en activity_main

43. Creamos un paquete menu para la lista de iconos del menu

44. Creamos un fichero navigation_menu

45. Importamos los iconos de navegación

46. Creamos los respectivos fragments a los que navegaremos

47. Controlamos que bottomNavView se oculta en los fragmentos de login y registro

48. Controlamos que se muestre o no la descripción en determinados casos

49. Creamos un nuevo fragment en ui/auth llamado SetupProfileFragment
en el que pediremos al asuario nombre de perfil y foto

50. Hacemos los cambios necesarios en el layout de SetupProfileFragment

51. En el AuthViewModel vamos a crear un método llamado updateUserProfile

52. En la clase AuthRepo creamos un método llamado updateProfile
    -Tambien lo creamos en el AuthRepoImp y en el AuthDataSource

53. Añadimos el fragment al main_graph

54. En el oviewCreated del CameraFragment añadimos las funcionalidades necesarias para hacer una foto

55. Modificamos el RegisterFragment para que el en lugar de ir HomeFragment vaya al SetupProfileFragment

56. Añadimos la funcionalidad de hacer fotos en SetupProfileFragment

57. Implementamos el updateProfile en AuthDataSource

58. Trabajamos el CameraFragment

59. Creamos un nuevo paquete en presentation llamado camera donde almacenaremos su viewModel

60. Creamos una clase CameraViewModel

61. Creamos un paquete camera en domaim
    -Creamos una interfaz de nombre CameraRepo que contendrá el método uploadPhoto
    -Creamos la clase CameraRepoImp para implementar la interfaz

62. Creamos en remote el paquete camera y su respectiva clase DataSource

63. Repetimos muchos de los procesos anteriores en otros fragment
    -Creamos el factory del viewModel, usamos el viewModels de otros fragmentos,
    hacemos la inyección de dependencias.

64. Importamos un vector drawable para que nos muestre un icono de error cuando no existe ningún post

65. Cambiamos el nombre de la variable post_timestamp a create_at y la marcamos como @ServerTimeStamp

66. Creamos un object TimeAgo en core el cual se encargará de trabajar el tiempo del servidor
 para nosotros y nos dice cuánto tiempo hace que hemos subido la foto


